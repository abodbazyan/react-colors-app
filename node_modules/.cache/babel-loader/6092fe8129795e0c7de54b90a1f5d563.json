{"ast":null,"code":"import _defineProperty from \"/home/sm1ley/Desktop/react-colors/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/sm1ley/Desktop/react-colors/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sm1ley/Desktop/react-colors/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/sm1ley/Desktop/react-colors/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/sm1ley/Desktop/react-colors/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/sm1ley/Desktop/react-colors/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/sm1ley/Desktop/react-colors/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/sm1ley/Desktop/react-colors/src/ColorPickerForm.js\";\nimport React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { ChromePicker } from \"react-color\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from \"./styles/ColorPickerFormStyles\";\n\nvar ColorPickerForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ColorPickerForm, _Component);\n\n  function ColorPickerForm(props) {\n    var _this;\n\n    _classCallCheck(this, ColorPickerForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ColorPickerForm).call(this, props));\n    _this.state = {\n      currentColor: \"teal\",\n      newColorName: \"\"\n    };\n    _this.updateCurrentColor = _this.updateCurrentColor.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ColorPickerForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      ValidatorForm.addValidationRule(\"isColorNameUnique\", function (value) {\n        return _this2.props.colors.every(function (_ref) {\n          var name = _ref.name;\n          return name.toLowerCase() !== value.toLowerCase();\n        });\n      });\n      ValidatorForm.addValidationRule(\"isColorUnique\", function (value) {\n        return _this2.props.colors.every(function (_ref2) {\n          var color = _ref2.color;\n          return color !== _this2.state.currentColor;\n        });\n      });\n    }\n  }, {\n    key: \"updateCurrentColor\",\n    value: function updateCurrentColor(newColor) {\n      this.setState({\n        currentColor: newColor.hex\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(evt) {\n      this.setState(_defineProperty({}, evt.target.name, evt.target.value));\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      var newColor = {\n        color: this.state.currentColor,\n        name: this.state.newColorName\n      };\n      this.props.addNewColor(newColor);\n      this.setState({\n        newColorName: \"\"\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          paletteIsFull = _this$props.paletteIsFull,\n          classes = _this$props.classes;\n      var _this$state = this.state,\n          currentColor = _this$state.currentColor,\n          newColorName = _this$state.newColorName;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(ChromePicker, {\n        color: currentColor,\n        onChangeComplete: this.updateCurrentColor,\n        className: classes.picker,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }), React.createElement(ValidatorForm, {\n        onSubmit: this.handleSubmit,\n        ref: \"form\",\n        instantValidate: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(TextValidator, {\n        value: newColorName,\n        className: classes.colorNameInput,\n        placeholder: \"Color Name\",\n        name: \"newColorName\",\n        variant: \"filled\",\n        margin: \"normal\",\n        onChange: this.handleChange,\n        validators: [\"required\", \"isColorNameUnique\", \"isColorUnique\"],\n        errorMessages: [\"Enter a color name\", \"Color name must be unique\", \"Color already used!\"],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }), React.createElement(Button, {\n        variant: \"contained\",\n        type: \"submit\",\n        color: \"primary\",\n        disabled: paletteIsFull,\n        className: classes.addColor,\n        style: {\n          backgroundColor: paletteIsFull ? \"grey\" : currentColor\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, paletteIsFull ? \"Palette Full\" : \"Add Color\")));\n    }\n  }]);\n\n  return ColorPickerForm;\n}(Component);\n\nexport default withStyles(styles)(ColorPickerForm);","map":{"version":3,"sources":["/home/sm1ley/Desktop/react-colors/src/ColorPickerForm.js"],"names":["React","Component","Button","ValidatorForm","TextValidator","ChromePicker","withStyles","styles","ColorPickerForm","props","state","currentColor","newColorName","updateCurrentColor","bind","handleChange","handleSubmit","addValidationRule","value","colors","every","name","toLowerCase","color","newColor","setState","hex","evt","target","addNewColor","paletteIsFull","classes","picker","colorNameInput","addColor","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { ChromePicker } from \"react-color\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from \"./styles/ColorPickerFormStyles\";\n\nclass ColorPickerForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { currentColor: \"teal\", newColorName: \"\" };\n    this.updateCurrentColor = this.updateCurrentColor.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  componentDidMount() {\n    ValidatorForm.addValidationRule(\"isColorNameUnique\", value =>\n      this.props.colors.every(\n        ({ name }) => name.toLowerCase() !== value.toLowerCase()\n      )\n    );\n    ValidatorForm.addValidationRule(\"isColorUnique\", value =>\n      this.props.colors.every(({ color }) => color !== this.state.currentColor)\n    );\n  }\n  updateCurrentColor(newColor) {\n    this.setState({ currentColor: newColor.hex });\n  }\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n  handleSubmit() {\n    const newColor = {\n      color: this.state.currentColor,\n      name: this.state.newColorName\n    };\n    this.props.addNewColor(newColor);\n    this.setState({ newColorName: \"\" });\n  }\n\n  render() {\n    const { paletteIsFull, classes } = this.props;\n    const { currentColor, newColorName } = this.state;\n    return (\n      <div>\n        <ChromePicker\n          color={currentColor}\n          onChangeComplete={this.updateCurrentColor}\n          className={classes.picker}\n        />\n        <ValidatorForm\n          onSubmit={this.handleSubmit}\n          ref='form'\n          instantValidate={false}\n        >\n          <TextValidator\n            value={newColorName}\n            className={classes.colorNameInput}\n            placeholder='Color Name'\n            name='newColorName'\n            variant='filled'\n            margin='normal'\n            onChange={this.handleChange}\n            validators={[\"required\", \"isColorNameUnique\", \"isColorUnique\"]}\n            errorMessages={[\n              \"Enter a color name\",\n              \"Color name must be unique\",\n              \"Color already used!\"\n            ]}\n          />\n          <Button\n            variant='contained'\n            type='submit'\n            color='primary'\n            disabled={paletteIsFull}\n            className={classes.addColor}\n            style={{\n              backgroundColor: paletteIsFull ? \"grey\" : currentColor\n            }}\n          >\n            {paletteIsFull ? \"Palette Full\" : \"Add Color\"}\n          </Button>\n        </ValidatorForm>\n      </div>\n    );\n  }\n}\nexport default withStyles(styles)(ColorPickerForm);\n"]},"metadata":{},"sourceType":"module"}