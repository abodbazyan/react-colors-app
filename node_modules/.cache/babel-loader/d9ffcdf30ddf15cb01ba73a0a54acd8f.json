{"ast":null,"code":"import _defineProperty from \"/home/sm1ley/Desktop/react-colors/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/sm1ley/Desktop/react-colors/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sm1ley/Desktop/react-colors/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/sm1ley/Desktop/react-colors/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/sm1ley/Desktop/react-colors/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/sm1ley/Desktop/react-colors/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/sm1ley/Desktop/react-colors/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/sm1ley/Desktop/react-colors/src/PaletteMetaForm.js\";\nimport React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\n\nvar PaletteMetaForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PaletteMetaForm, _Component);\n\n  function PaletteMetaForm(props) {\n    var _this;\n\n    _classCallCheck(this, PaletteMetaForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PaletteMetaForm).call(this, props));\n\n    _this.handleClickOpen = function () {\n      _this.setState({\n        open: true\n      });\n    };\n\n    _this.handleClose = function () {\n      _this.setState({\n        open: false\n      });\n    };\n\n    _this.state = {\n      stage: \"form\",\n      newPaletteName: \"\"\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.showEmojiPicker = _this.showEmojiPicker.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.savePalette = _this.savePalette.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(PaletteMetaForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      ValidatorForm.addValidationRule(\"isPaletteNameUnique\", function (value) {\n        return _this2.props.palettes.every(function (_ref) {\n          var paletteName = _ref.paletteName;\n          return paletteName.toLowerCase() !== value.toLowerCase();\n        });\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(evt) {\n      this.setState(_defineProperty({}, evt.target.name, evt.target.value));\n    }\n  }, {\n    key: \"showEmojiPicker\",\n    value: function showEmojiPicker() {\n      this.setState({\n        stage: \"emoji\"\n      });\n    }\n  }, {\n    key: \"savePalette\",\n    value: function savePalette(emoji) {\n      var newPalette = {\n        paletteName: this.state.newPaletteName,\n        emoji: emoji.native\n      };\n      this.props.handleSubmit(newPalette);\n      this.setState({\n        stage: \"\"\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          newPaletteName = _this$state.newPaletteName,\n          stage = _this$state.stage;\n      var hideForm = this.props.hideForm;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(Dialog, {\n        open: stage === \"emoji\",\n        onClose: hideForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(DialogTitle, {\n        id: \"form-dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"Choose a Palette Emoji\"), React.createElement(Picker, {\n        title: \"Pick a Palette Emoji\",\n        onSelect: this.savePalette,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      })), React.createElement(Dialog, {\n        open: stage === \"form\",\n        \"aria-labelledby\": \"form-dialog-title\",\n        onClose: hideForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(DialogTitle, {\n        id: \"form-dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"Choose a Palette Name\"), React.createElement(ValidatorForm, {\n        onSubmit: this.showEmojiPicker,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(DialogContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(DialogContentText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"Please enter a name for your new beautiful palette. Make sure it's unique!\"), React.createElement(TextValidator, {\n        label: \"Palette Name\",\n        value: newPaletteName,\n        name: \"newPaletteName\",\n        onChange: this.handleChange,\n        fullWidth: true,\n        margin: \"normal\",\n        validators: [\"required\", \"isPaletteNameUnique\"],\n        errorMessages: [\"Enter Palette Name\", \"Name already used\"],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      })), React.createElement(DialogActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: hideForm,\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Cancel\"), React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"Save Palette\")))));\n    }\n  }]);\n\n  return PaletteMetaForm;\n}(Component);\n\nexport default PaletteMetaForm;","map":{"version":3,"sources":["/home/sm1ley/Desktop/react-colors/src/PaletteMetaForm.js"],"names":["React","Component","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","ValidatorForm","TextValidator","Picker","PaletteMetaForm","props","handleClickOpen","setState","open","handleClose","state","stage","newPaletteName","handleChange","bind","showEmojiPicker","savePalette","addValidationRule","value","palettes","every","paletteName","toLowerCase","evt","target","name","emoji","newPalette","native","handleSubmit","hideForm"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\n\nclass PaletteMetaForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stage: \"form\",\n      newPaletteName: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.showEmojiPicker = this.showEmojiPicker.bind(this);\n    this.savePalette = this.savePalette.bind(this);\n  }\n  componentDidMount() {\n    ValidatorForm.addValidationRule(\"isPaletteNameUnique\", value =>\n      this.props.palettes.every(\n        ({ paletteName }) => paletteName.toLowerCase() !== value.toLowerCase()\n      )\n    );\n  }\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n  showEmojiPicker() {\n    this.setState({ stage: \"emoji\" });\n  }\n  savePalette(emoji) {\n    const newPalette = {\n      paletteName: this.state.newPaletteName,\n      emoji: emoji.native\n    };\n    this.props.handleSubmit(newPalette);\n    this.setState({ stage: \"\" });\n  }\n  handleClickOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  render() {\n    const { newPaletteName, stage } = this.state;\n    const { hideForm } = this.props;\n\n    return (\n      <div>\n        <Dialog open={stage === \"emoji\"} onClose={hideForm}>\n          <DialogTitle id='form-dialog-title'>\n            Choose a Palette Emoji\n          </DialogTitle>\n          <Picker title='Pick a Palette Emoji' onSelect={this.savePalette} />\n        </Dialog>\n        <Dialog\n          open={stage === \"form\"}\n          aria-labelledby='form-dialog-title'\n          onClose={hideForm}\n        >\n          <DialogTitle id='form-dialog-title'>\n            Choose a Palette Name\n          </DialogTitle>\n          <ValidatorForm onSubmit={this.showEmojiPicker}>\n            <DialogContent>\n              <DialogContentText>\n                Please enter a name for your new beautiful palette. Make sure\n                it's unique!\n              </DialogContentText>\n\n              <TextValidator\n                label='Palette Name'\n                value={newPaletteName}\n                name='newPaletteName'\n                onChange={this.handleChange}\n                fullWidth\n                margin='normal'\n                validators={[\"required\", \"isPaletteNameUnique\"]}\n                errorMessages={[\"Enter Palette Name\", \"Name already used\"]}\n              />\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={hideForm} color='primary'>\n                Cancel\n              </Button>\n              <Button variant='contained' color='primary' type='submit'>\n                Save Palette\n              </Button>\n            </DialogActions>\n          </ValidatorForm>\n        </Dialog>\n      </div>\n    );\n  }\n}\nexport default PaletteMetaForm;\n"]},"metadata":{},"sourceType":"module"}